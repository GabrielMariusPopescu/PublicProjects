@inject HttpClient _httpClient

<EditForm Model="@Vehicle" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Brand:</label>
            <div>
                <InputSelect @bind-Value="Vehicle.BrandId" class="form-control">
                    <option value=""> - Select Brand - </option>
                    @if (Brands != null && Brands.Any())
                    {
                        @foreach (var brand in Brands)
                        {
                            <option value="@brand.Id">@brand.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Vehicle.BrandId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Model:</label>
            <div>
                <InputSelect @bind-Value="Vehicle.ModelId" class="form-control">
                    <option value=""> - Select Model - </option>
                    @if (Models != null && Models.Any())
                    {
                        @foreach (var model in Models)
                        {
                            <option value="@model.Id">@model.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Vehicle.ModelId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Color:</label>
            <div>
                <InputSelect @bind-Value="Vehicle.ColorId" class="form-control">
                    <option value=""> - Select Color - </option>
                    @if (Colors != null && Colors.Any())
                    {
                        @foreach (var color in Colors)
                        {
                            <option value="@color.Id">@color.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Vehicle.ColorId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Year:</label>
            <div>
                <InputNumber @bind-Value="@Vehicle.Year" class="form-control" />
                <ValidationMessage For="@(() => Vehicle.Year)" />
            </div>
        </div>
        <div class="form-group">
            <label>Plate Number:</label>
            <div>
                <InputText @bind-Value="@Vehicle.PlateNumber" class="form-control" />
                <ValidationMessage For="@(() => Vehicle.PlateNumber)" />
            </div>
        </div>
        <div class="form-group">
            <label>Vehicle Identification Number:</label>
            <div>
                <InputText @bind-Value="@Vehicle.Vin" class="form-control" />
                <ValidationMessage For="@(() => Vehicle.Vin)" />
            </div>
        </div>
        <div class="form-group">
            <label>Image (Optional):</label>
            <div>
                <InputFile OnChange="@UploadFile"/>
                <p class="text-danger">@_uploadFileWarning</p>
            </div>
        </div>
        <div class="form-group">
            <label>Daily Rate:</label>
            <div>
                <InputNumber @bind-Value="@Vehicle.RentalRate" class="form-control" />
                <ValidationMessage For="@(() => Vehicle.RentalRate)" />
            </div>
        </div>
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }

    <BackToList Target="vehicles" />
</EditForm>

@code {
    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public Vehicle Vehicle { get; set; }

    [Parameter]
    public string ButtonText { get; set; } = "Save";

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    private IList<Brand> Brands { get; set; }
    private IList<Model> Models { get; set; }
    private IList<Color> Colors { get; set; }
    private string _uploadFileWarning;

    protected override async Task OnInitializedAsync()
    {
        Brands = await _httpClient.GetFromJsonAsync<List<Brand>>(Endpoints.BrandEndpoint);
        Models = await _httpClient.GetFromJsonAsync<List<Model>>(Endpoints.ModelEndpoint);
        Colors = await _httpClient.GetFromJsonAsync<List<Color>>(Endpoints.ColorsEndpoint);
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (!string.IsNullOrEmpty(file.Name))
        {
            var extension = Path.GetExtension(file.Name);
            if (extension.ToLower().Contains("jpg") ||
                extension.ToLower().Contains("png") ||
                extension.ToLower().Contains("jpeg"))
            {
                var imageId = Guid.NewGuid().ToString().Replace("-", "");
                Vehicle.ImageName = $"{imageId}{extension}";
                Vehicle.Image = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(Vehicle.Image);
                _uploadFileWarning = string.Empty;
            }
            else
            {
                _uploadFileWarning = "Please select a valid image file (*.jpg | *.png)";
            }
        }
    }
}