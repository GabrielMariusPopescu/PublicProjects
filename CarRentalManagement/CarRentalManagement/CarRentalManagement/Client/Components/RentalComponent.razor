@inject HttpClient _httpClient

<EditForm Model="@Rental" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Vehicle:</label>
            <div>
                <InputSelect @bind-Value="Rental.VehicleId" class="form-control">
                    <option value=""> - Select Vehicle - </option>
                    @if (Vehicles != null && Vehicles.Any())
                    {
                        @foreach (var vehicle in Vehicles)
                        {
                            <option value="@vehicle.Id">@vehicle.Brand.Name @vehicle.Model.Name @vehicle.Color.Name | @vehicle.PlateNumber</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Rental.VehicleId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Customer:</label>
            <div>
                <InputSelect @bind-Value="Rental.CustomerId" class="form-control">
                    <option value=""> - Select Customer - </option>
                    @if (Customers != null && Customers.Any())
                    {
                        @foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">@customer.LastName, @customer.FirstName | @customer.TaxId</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Rental.CustomerId)" />
            </div>
        </div>
        <div class="form-group">
            <label>Date Out:</label>
            <div>
                <InputDate @bind-Value="Rental.DateOut" class="form-control" />
                <ValidationMessage For="@(() => Rental.DateOut)" />
            </div>
        </div>
        @if (Rental.Id != Guid.Empty)
        {
            <div class="form-group">
                <label>Date In:</label>
                <div>
                    <InputDate @bind-Value="Rental.DateIn" class="form-control" />
                    <ValidationMessage For="@(() => Rental.DateIn)" />
                </div>
            </div>
        }
    </fieldset>
    
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }

    <BackToList Target="rentals" />
</EditForm>

@code {
    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public Rental Rental { get; set; }

    [Parameter]
    public string ButtonText { get; set; }

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    private IList<Vehicle> Vehicles { get; set; }
    private IList<Customer> Customers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Vehicles = await _httpClient.GetFromJsonAsync<List<Vehicle>>(Endpoints.VehicleEndpoint);
        Customers = await _httpClient.GetFromJsonAsync<List<Customer>>(Endpoints.CustomerEndpoint);
    }
}
